% Constants
true \a b. a
false \a b. b

zero        \f x. x
one         \f x. f x
two         \f x. f (f x)
three       \f x. f (f (f x))
four        \f x. f (f (f (f x)))
five        \f x. f (f (f (f (f x))))
six         \f x. f (f (f (f (f (f x)))))
seven       \f x. f (f (f (f (f (f (f x))))))
eight       \f x. f (f (f (f (f (f (f (f x)))))))
nine        \f x. f (f (f (f (f (f (f (f (f x))))))))
ten         \f x. f (f (f (f (f (f (f (f (f (f x)))))))))
eleven      \f x. f (f (f (f (f (f (f (f (f (f (f x))))))))))
twelve      \f x. f (f (f (f (f (f (f (f (f (f (f (f x)))))))))))
thirteen    \f x. f (f (f (f (f (f (f (f (f (f (f (f (f x))))))))))))
fourteen    \f x. f (f (f (f (f (f (f (f (f (f (f (f (f (f x)))))))))))))
fifteen     \f x. f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x))))))))))))))
sixteen     \f x. f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x)))))))))))))))
seventeen   \f x. f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x))))))))))))))))
eighteen    \f x. f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x)))))))))))))))))
nineteen    \f x. f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x))))))))))))))))))
twenty      \f x. f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x)))))))))))))))))))
twentyone   \f x. f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x))))))))))))))))))))
twentytwo   \f x. f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x)))))))))))))))))))))
twentythree \f x. f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x))))))))))))))))))))))
twentyfour  \f x. f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x)))))))))))))))))))))))
twentyfive  succ twentyfour

% Combinators
Y           \f. (\x. f (x x)) (\x. f (x x))
I           \x. x
K           \x y. x
S           \x y z. x z (y z)
B           \x y z. x (y z)
W           \x y. x y y
C           \x y z. x z y

% Math
pred        \n f x. n (\g h. h (g f))(\u. x)(\u. u)
succ        \n f x. f (n f x)
iszero      \n. n (\x a b.b)
if          \a b c. a b c (\a b. a)
minus       \a b. if (iszero b) a (minus (pred a) (pred b))
plus        \a b. if (iszero b) a (plus (succ a) (pred b))
mul         \a b. if (iszero b) zero (plus a (mul a (pred b)))
sqr         \a. mul a a
% integer division
div         \x y. if (iszero (minus y x)) (succ (div (minus x y) y)) zero
% module remainder
rem         \x y. if (lt x y) x (rem (minus x y) y)

% Logic
and         \x y. if x y false
or          \x y. if x true y
impl        \x y. if x y true
not         \x. if x false true

% compare
% greater or equal
ge          \x y. iszero (minus y x)
% less or equal
le          \x y. iszero (minus x y)
% greater than
gt          \x y. not (le x y)
% less than
lt          \x y. not (ge x y)
% equal
eq          \x y. and (ge x y) (le x y)

% Pairs
pair        \x y z. z x y
fst         \p. p (\x y. x)
snd         \p. p (\x y. y)

% Lists (via pairs)
nilP        pair true true
isnilP      fst
consP       \h. \t. pair false (pair h t)
headP       \z. fst (snd z)
tailP       \z. snd (snd z)

mapP        \f list. if (isnilP list) nilP (consP (f (headP list)) (mapP f (tailP list)))
foldlP      \f z0 list. if (isnilP list) z0 (foldlP f (f z0 (headP list)) (tailP list))

lenP        foldlP (\acc item. succ acc) zero
sumP        foldlP (\acc item. plus acc item) zero

% Lists
nil         \c n. n
isnil       \l. l (\h t. false) true
cons        \h. \t c. \n. c h (t c n)
head        \l. l (\h t. h) false
tail        \l. fst (l (\x p. pair (snd p) (cons x (snd p))) (pair nil nil))

map         \f list. if (isnil list) nil (cons (f (head list)) (map f (tail list)))
foldl       \f z0 list. if (isnil list) z0 (foldl f (f z0 (head list)) (tail list))

len         foldl (\acc item. succ acc) zero
sum         foldl plus zero
